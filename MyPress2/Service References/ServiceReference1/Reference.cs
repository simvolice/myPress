//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан программой.
//     Исполняемая версия:4.0.30319.18444
//
//     Изменения в этом файле могут привести к неправильной работе и будут потеряны в случае
//     повторной генерации кода.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This code was auto-generated by Microsoft.Silverlight.ServiceReference, version 5.0.61118.0
// 
namespace MyPress2.ServiceReference1 {
    using System.Runtime.Serialization;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Data", Namespace="http://schemas.datacontract.org/2004/07/MyPress.Web")]
    public partial class Data : object, System.ComponentModel.INotifyPropertyChanged {
        
        private System.Collections.ObjectModel.ObservableCollection<MyPress2.ServiceReference1.Bing> BingField;
        
        private string EmailField;
        
        private string LoginField;
        
        private string PassField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.ObjectModel.ObservableCollection<MyPress2.ServiceReference1.Bing> Bing {
            get {
                return this.BingField;
            }
            set {
                if ((object.ReferenceEquals(this.BingField, value) != true)) {
                    this.BingField = value;
                    this.RaisePropertyChanged("Bing");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Email {
            get {
                return this.EmailField;
            }
            set {
                if ((object.ReferenceEquals(this.EmailField, value) != true)) {
                    this.EmailField = value;
                    this.RaisePropertyChanged("Email");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Login {
            get {
                return this.LoginField;
            }
            set {
                if ((object.ReferenceEquals(this.LoginField, value) != true)) {
                    this.LoginField = value;
                    this.RaisePropertyChanged("Login");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Pass {
            get {
                return this.PassField;
            }
            set {
                if ((object.ReferenceEquals(this.PassField, value) != true)) {
                    this.PassField = value;
                    this.RaisePropertyChanged("Pass");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Bing", Namespace="http://schemas.datacontract.org/2004/07/MyPress.Web")]
    public partial class Bing : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string DescriptionField;
        
        private string SentAnalysField;
        
        private string TitleField;
        
        private string UrlField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Description {
            get {
                return this.DescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.DescriptionField, value) != true)) {
                    this.DescriptionField = value;
                    this.RaisePropertyChanged("Description");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SentAnalys {
            get {
                return this.SentAnalysField;
            }
            set {
                if ((object.ReferenceEquals(this.SentAnalysField, value) != true)) {
                    this.SentAnalysField = value;
                    this.RaisePropertyChanged("SentAnalys");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Title {
            get {
                return this.TitleField;
            }
            set {
                if ((object.ReferenceEquals(this.TitleField, value) != true)) {
                    this.TitleField = value;
                    this.RaisePropertyChanged("Title");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Url {
            get {
                return this.UrlField;
            }
            set {
                if ((object.ReferenceEquals(this.UrlField, value) != true)) {
                    this.UrlField = value;
                    this.RaisePropertyChanged("Url");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference1.IMyPressService")]
    public interface IMyPressService {
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IMyPressService/QueryToBing", ReplyAction="http://tempuri.org/IMyPressService/QueryToBingResponse")]
        System.IAsyncResult BeginQueryToBing(string query, MyPress2.ServiceReference1.Data data, string market, int countQuery, System.AsyncCallback callback, object asyncState);
        
        void EndQueryToBing(System.IAsyncResult result);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IMyPressServiceChannel : MyPress2.ServiceReference1.IMyPressService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class MyPressServiceClient : System.ServiceModel.ClientBase<MyPress2.ServiceReference1.IMyPressService>, MyPress2.ServiceReference1.IMyPressService {
        
        private BeginOperationDelegate onBeginQueryToBingDelegate;
        
        private EndOperationDelegate onEndQueryToBingDelegate;
        
        private System.Threading.SendOrPostCallback onQueryToBingCompletedDelegate;
        
        private BeginOperationDelegate onBeginOpenDelegate;
        
        private EndOperationDelegate onEndOpenDelegate;
        
        private System.Threading.SendOrPostCallback onOpenCompletedDelegate;
        
        private BeginOperationDelegate onBeginCloseDelegate;
        
        private EndOperationDelegate onEndCloseDelegate;
        
        private System.Threading.SendOrPostCallback onCloseCompletedDelegate;
        
        public MyPressServiceClient() {
        }
        
        public MyPressServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public MyPressServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public MyPressServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public MyPressServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Net.CookieContainer CookieContainer {
            get {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    return httpCookieContainerManager.CookieContainer;
                }
                else {
                    return null;
                }
            }
            set {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    httpCookieContainerManager.CookieContainer = value;
                }
                else {
                    throw new System.InvalidOperationException("Не удалось установить CookieContainer. Убедитесь, что привязка содержит HttpCooki" +
                            "eContainerBindingElement.");
                }
            }
        }
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> QueryToBingCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> OpenCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> CloseCompleted;
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult MyPress2.ServiceReference1.IMyPressService.BeginQueryToBing(string query, MyPress2.ServiceReference1.Data data, string market, int countQuery, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginQueryToBing(query, data, market, countQuery, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void MyPress2.ServiceReference1.IMyPressService.EndQueryToBing(System.IAsyncResult result) {
            base.Channel.EndQueryToBing(result);
        }
        
        private System.IAsyncResult OnBeginQueryToBing(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string query = ((string)(inValues[0]));
            MyPress2.ServiceReference1.Data data = ((MyPress2.ServiceReference1.Data)(inValues[1]));
            string market = ((string)(inValues[2]));
            int countQuery = ((int)(inValues[3]));
            return ((MyPress2.ServiceReference1.IMyPressService)(this)).BeginQueryToBing(query, data, market, countQuery, callback, asyncState);
        }
        
        private object[] OnEndQueryToBing(System.IAsyncResult result) {
            ((MyPress2.ServiceReference1.IMyPressService)(this)).EndQueryToBing(result);
            return null;
        }
        
        private void OnQueryToBingCompleted(object state) {
            if ((this.QueryToBingCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.QueryToBingCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void QueryToBingAsync(string query, MyPress2.ServiceReference1.Data data, string market, int countQuery) {
            this.QueryToBingAsync(query, data, market, countQuery, null);
        }
        
        public void QueryToBingAsync(string query, MyPress2.ServiceReference1.Data data, string market, int countQuery, object userState) {
            if ((this.onBeginQueryToBingDelegate == null)) {
                this.onBeginQueryToBingDelegate = new BeginOperationDelegate(this.OnBeginQueryToBing);
            }
            if ((this.onEndQueryToBingDelegate == null)) {
                this.onEndQueryToBingDelegate = new EndOperationDelegate(this.OnEndQueryToBing);
            }
            if ((this.onQueryToBingCompletedDelegate == null)) {
                this.onQueryToBingCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnQueryToBingCompleted);
            }
            base.InvokeAsync(this.onBeginQueryToBingDelegate, new object[] {
                        query,
                        data,
                        market,
                        countQuery}, this.onEndQueryToBingDelegate, this.onQueryToBingCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginOpen(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(callback, asyncState);
        }
        
        private object[] OnEndOpen(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndOpen(result);
            return null;
        }
        
        private void OnOpenCompleted(object state) {
            if ((this.OpenCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.OpenCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void OpenAsync() {
            this.OpenAsync(null);
        }
        
        public void OpenAsync(object userState) {
            if ((this.onBeginOpenDelegate == null)) {
                this.onBeginOpenDelegate = new BeginOperationDelegate(this.OnBeginOpen);
            }
            if ((this.onEndOpenDelegate == null)) {
                this.onEndOpenDelegate = new EndOperationDelegate(this.OnEndOpen);
            }
            if ((this.onOpenCompletedDelegate == null)) {
                this.onOpenCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnOpenCompleted);
            }
            base.InvokeAsync(this.onBeginOpenDelegate, null, this.onEndOpenDelegate, this.onOpenCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginClose(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginClose(callback, asyncState);
        }
        
        private object[] OnEndClose(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndClose(result);
            return null;
        }
        
        private void OnCloseCompleted(object state) {
            if ((this.CloseCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CloseCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CloseAsync() {
            this.CloseAsync(null);
        }
        
        public void CloseAsync(object userState) {
            if ((this.onBeginCloseDelegate == null)) {
                this.onBeginCloseDelegate = new BeginOperationDelegate(this.OnBeginClose);
            }
            if ((this.onEndCloseDelegate == null)) {
                this.onEndCloseDelegate = new EndOperationDelegate(this.OnEndClose);
            }
            if ((this.onCloseCompletedDelegate == null)) {
                this.onCloseCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCloseCompleted);
            }
            base.InvokeAsync(this.onBeginCloseDelegate, null, this.onEndCloseDelegate, this.onCloseCompletedDelegate, userState);
        }
        
        protected override MyPress2.ServiceReference1.IMyPressService CreateChannel() {
            return new MyPressServiceClientChannel(this);
        }
        
        private class MyPressServiceClientChannel : ChannelBase<MyPress2.ServiceReference1.IMyPressService>, MyPress2.ServiceReference1.IMyPressService {
            
            public MyPressServiceClientChannel(System.ServiceModel.ClientBase<MyPress2.ServiceReference1.IMyPressService> client) : 
                    base(client) {
            }
            
            public System.IAsyncResult BeginQueryToBing(string query, MyPress2.ServiceReference1.Data data, string market, int countQuery, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[4];
                _args[0] = query;
                _args[1] = data;
                _args[2] = market;
                _args[3] = countQuery;
                System.IAsyncResult _result = base.BeginInvoke("QueryToBing", _args, callback, asyncState);
                return _result;
            }
            
            public void EndQueryToBing(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("QueryToBing", _args, result);
            }
        }
    }
}
